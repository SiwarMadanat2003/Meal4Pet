int Dis;   //Distance
int angle; //angle for servo motor
int H_L;
int TEMP;   //Value For TEMP Sensor
int b ; //Tick 1 For Servo
int a;  //Tick 2 For Servo


int Tick;  // For time counter

int timerr  ;

void mydelay_ms(unsigned int ms) {
    unsigned int delayms = ms; // 1 overflow = 1 ms
    timerr = 0;                 // Reset overflow counter
    while (timerr < delayms);
}




void interrupt(void){

     if(INTCON & 0x04){    // TMR0 overflow every 32.7ms

         if(PORTD&0B00001000){ //Cheak Flame sensor
          PORTD=PORTD|0B00010000;   //Turn on Buzzer
         }else{
          PORTD=PORTD&0B11101111;    //Turn off Buzzer
         }                                              
         timerr++;   // counter for delay
         timerr=timerr/32;// to make the delay 1ms in one count




         Tick++;

         INTCON = INTCON & 0xFB;

     }


       if(PIR1 & 0x04){
       if(b==1){                                           // CCP1 interrupt
             if(H_L){                                // high
                       CCPR1H = angle >> 8;
                       CCPR1L = angle;
                       H_L = 0;                      // next time low
                       CCP1CON = 0x09;              // compare mode, clear output on match
                       TMR1H = 0;
                       TMR1L = 0;
             }
             else{                                          //low
                       CCPR1H = (40000 - angle) >> 8;       // 40000 counts correspond to 20ms
                       CCPR1L = (40000 - angle);
                       CCP1CON = 0x08;             // compare mode, set output on match
                       H_L = 1;                     //next time High
                       TMR1H = 0;
                       TMR1L = 0;
             }  }else{
              PIR1 = PIR1&0xFB;
             }

             PIR1 = PIR1&0xFB;
       }


 }

void ATD_init(){
      ADCON0=0x41;           // ON, Channel 0, Fosc/16== 500KHz, Dont Go
      ADCON1=0xCE;           // RA0 Analog, others are Digital, Right Allignment,
      TRISA=0x01;
}
int ATD_read(){
      ADCON0=ADCON0 | 0x04;  // GO
      while(ADCON0&0x04);    // wait until DONE
      return (ADRESH<<8)|ADRESL;
}

void CCPPWM_init(){                  // Configure CCP1 and CCP2 at 2ms period with 50% duty cycle
        T2CON = 0x07;                    // Enable Timer2 at Fosc/4 with 1:16 prescaler (8 uS percount 2000uS to count 250 counts)
        CCP2CON = 0x0C;                  // Enable PWM for CCP2
        PR2 = 250;                       // 250 counts = 8uS *250 = 2ms period
        CCPR2L = 125;                    // Buffer where we are specifying the pulse width (duty cycle)
}


void Speed(int p){
       CCPR2L = p;                  // PWM from RC1
}


int dist(){
int d = 0;
T1CON = 0x10; // Use internal clock, no prescaler
mydelay_ms(10);


    TMR1H = 0;                  // Reset Timer1
    TMR1L = 0;

    PORTC = PORTC | 0b00001000; // Trigger HIGH
    mydelay_ms(1);               // 1 ms delay
    PORTC = PORTC & 0b11110111; // Trigger LOW

    while (!(PORTC & 0b00010000));


    T1CON = T1CON | 0b00000001; // Start Timer


    while (PORTC & 0b00010000);


    T1CON = T1CON & 0b11111110; // Stop Timer

    d = (TMR1L | (TMR1H << 8)); // Read Timer1 value
    d = d / 58.82;           // Convert time to distance (cm)
    mydelay_ms(10);
    T1CON = 0x01;
    return d;
}




void main(){
TRISA=0B00000000;
TRISB=0B11011001;
TRISC=0B00110000;
TRISD=0B00001100;

PORTA=0B00000000;
PORTB=0B00000000;
PORTC=0B00000000;
PORTD=0B00000000;


//For Timer 0
OPTION_REG = 0x87; // 32.8ms overflow
TMR0 = 0;


TMR1H = 0;
TMR1L = 0;
H_L = 1;                // start high
CCP1CON = 0x08;        // Compare mode, set output on match

T1CON = 0x01;

INTCON = 0b11100000;         // Enable GIE, peripheral interrupts and TMR0 Interrupt
PIE1 = PIE1|0x04;      // Enable CCP1 interrupts
CCPR1H = 2000>>8;      // Value preset in a program to compare the TMR1H value to            - 1ms
CCPR1L = 2000;         // Value preset in a program to compare the TMR1L value to


ATD_init();
CCPPWM_init();



a=1;
while(1){

Dis=dist();

if(Dis<=15 ){ //Cheak the dis
PORTD=PORTD | 0B10000000; //Turn on green Led
PORTD=PORTD & 0B10111111; //Turn off green Led


if (Tick>=300){   // Every 10s  300*32ms
b=1;
angle = 3500;    // Open the Food Part
mydelay_ms(3000);
angle = 1000;   // Close the Food Part
mydelay_ms(1000);
b=0;
Tick=0;
}else{

Tick=Tick;
}


TEMP=ATD_read();   //Read Temp


if(TEMP>60 ){     //Cheak Temp
TEMP=TEMP*3;
Speed(TEMP);   //Turn on fan
}else{
Speed(0);      //Turn off fan
}

if(PORTC&0B00100000){   //Cheak LDR
PORTD=PORTD|0B00000001;      //Turn on Light
}else{
PORTD=PORTD&0B11111110;         //Turn off Light
}


}else{
// There is no animal
PORTD=PORTD & 0B01111111; //Turn off green Led
PORTD=PORTD | 0B01000000; //Turn on red Led

Speed(0);      //Turn off fan
PORTD=PORTD&0B11111110;         //Turn off Light


Tick=0;
}



if(PORTB&0B00000001){ //Cheak servo switch
if(a==1){ //Servo
b=1;
angle = 3500;    // Open the Food Part
mydelay_ms(1000);
a=0;
b=0;
Tick=0;
}else{
a=0;
}
}else{
if(a==0){
b=1;
angle = 1000;      // Close the Food Part
mydelay_ms(1000);
a=1;
b=0;
}else{
a=1;
}
}



}



}